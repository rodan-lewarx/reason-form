// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.js";
import * as React from "react";
import * as ReFormNext from "bs-reform/src/ReFormNext.js";
import * as Reactstrap from "reactstrap";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as ReForm_Helpers from "bs-reform/src/ReForm_Helpers.js";
import * as InputField$ReactHooksTemplate from "./InputField.bs.js";

function get(state, field) {
  switch (field) {
    case 0 : 
        return state[/* email */0];
    case 1 : 
        return state[/* firstName */1];
    case 2 : 
        return state[/* lastName */2];
    
  }
}

function set(state, field, value) {
  switch (field) {
    case 0 : 
        return /* record */[
                /* email */value,
                /* firstName */state[/* firstName */1],
                /* lastName */state[/* lastName */2]
              ];
    case 1 : 
        return /* record */[
                /* email */state[/* email */0],
                /* firstName */value,
                /* lastName */state[/* lastName */2]
              ];
    case 2 : 
        return /* record */[
                /* email */state[/* email */0],
                /* firstName */state[/* firstName */1],
                /* lastName */value
              ];
    
  }
}

var StateLenses = /* module */[
  /* get */get,
  /* set */set
];

var AddUserForm = ReFormNext.Make([
      set,
      get
    ]);

function AddUserForm$1(Props) {
  var match = React.useState((function () {
          return /* NotSent */0;
        }));
  var setResult = match[1];
  var result = match[0];
  var match$1 = Curry._5(AddUserForm[/* use */6], /* record */[
        /* email */"",
        /* firstName */"",
        /* lastName */""
      ], /* Schema */[/* array */[
          /* Email */Block.__(0, [/* Email */0]),
          /* Custom */Block.__(3, [
              /* FirstName */1,
              (function (values) {
                  var match = values[/* firstName */1].length > 3 || values[/* firstName */1].length === 0;
                  if (match) {
                    return /* Valid */1;
                  } else {
                    return /* Error */["First Name must be empty or have more than 4 characters"];
                  }
                })
            ]),
          /* Custom */Block.__(3, [
              /* LastName */2,
              (function (values) {
                  var match = values[/* lastName */2].length > 3;
                  if (match) {
                    return /* Valid */1;
                  } else {
                    return /* Error */["Last Name must have more than 4 characters"];
                  }
                })
            ])
        ]], (function (param) {
          var state = param[/* state */1];
          var body = Json.stringify(Json_encode.object_(/* :: */[
                    /* tuple */[
                      "email",
                      state[/* values */1][/* email */0]
                    ],
                    /* :: */[
                      /* tuple */[
                        "firstName",
                        state[/* values */1][/* firstName */1]
                      ],
                      /* :: */[
                        /* tuple */[
                          "lastName",
                          state[/* values */1][/* lastName */2]
                        ],
                        /* [] */0
                      ]
                    ]
                  ]));
          fetch("http://localhost:8000/api/user", Fetch.RequestInit[/* make */0](/* Post */2, {
                        "Content-Type": "application/json"
                      }, Caml_option.some(body), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (response) {
                  var match = response.status;
                  if (match !== 200) {
                    Curry._1(setResult, (function (param) {
                            return /* Error */1;
                          }));
                  } else {
                    response.json().then((function (json) {
                              return Promise.resolve(Json_decode.field("createdUserId", Json_decode.string, json));
                            })).then((function (createdUserId) {
                            Curry._1(setResult, (function (param) {
                                    return /* Success */[createdUserId];
                                  }));
                            return Promise.resolve(createdUserId);
                          }));
                  }
                  return Promise.resolve(/* () */0);
                }));
          return undefined;
        }), undefined, /* () */0);
  var submit = match$1[/* submit */7];
  var handleChange = match$1[/* handleChange */2];
  var getFieldState = match$1[/* getFieldState */1];
  var state = match$1[/* state */0];
  var resetFields = function (param) {
    Curry._2(handleChange, /* Email */0, "");
    Curry._2(handleChange, /* FirstName */1, "");
    return Curry._2(handleChange, /* LastName */2, "");
  };
  React.useEffect((function () {
          if (typeof result !== "number") {
            resetFields(/* () */0);
          }
          return undefined;
        }), /* array */[result]);
  var getErrorText = function (fieldName, param) {
    var param$1 = Curry._1(getFieldState, /* Field */[fieldName]);
    var __x = typeof param$1 === "number" ? undefined : param$1[0];
    return Belt_Option.getWithDefault(__x, "");
  };
  var partial_arg = Curry._1(handleChange, /* Email */0);
  var partial_arg$1 = Curry._1(handleChange, /* FirstName */1);
  var partial_arg$2 = Curry._1(handleChange, /* LastName */2);
  return React.createElement(Reactstrap.Form, {
              onSubmit: (function ($$event) {
                  $$event.preventDefault();
                  return Curry._1(submit, /* () */0);
                }),
              children: null
            }, React.createElement(InputField$ReactHooksTemplate.make, {
                  label: "Email:",
                  onChange: (function (param) {
                      return ReForm_Helpers.handleDomFormChange(partial_arg, param);
                    }),
                  value: state[/* values */1][/* email */0],
                  getErrorText: (function (param) {
                      return getErrorText(/* Email */0, param);
                    })
                }), React.createElement(InputField$ReactHooksTemplate.make, {
                  label: "First Name:",
                  onChange: (function (param) {
                      return ReForm_Helpers.handleDomFormChange(partial_arg$1, param);
                    }),
                  value: state[/* values */1][/* firstName */1],
                  getErrorText: (function (param) {
                      return getErrorText(/* FirstName */1, param);
                    })
                }), React.createElement(InputField$ReactHooksTemplate.make, {
                  label: "Last Name:",
                  onChange: (function (param) {
                      return ReForm_Helpers.handleDomFormChange(partial_arg$2, param);
                    }),
                  value: state[/* values */1][/* lastName */2],
                  getErrorText: (function (param) {
                      return getErrorText(/* LastName */2, param);
                    })
                }), React.createElement("div", undefined, React.createElement(Reactstrap.Button, {
                      color: "primary",
                      children: "Submit"
                    }), React.createElement(Reactstrap.Button, {
                      color: "secondary",
                      onClick: (function (param) {
                          return resetFields(/* () */0);
                        }),
                      children: "Clear Form"
                    })), React.createElement("div", undefined, typeof result === "number" ? (
                    result !== 0 ? React.createElement("span", undefined, "Error when sending new user. Please try again later.") : null
                  ) : React.createElement("span", undefined, "User added succesfully")));
}

var make = AddUserForm$1;

export {
  StateLenses ,
  AddUserForm ,
  make ,
  
}
/* AddUserForm Not a pure module */
